name: Build and Publish to GHCR

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT }}

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,format=long
          type=ref,event=branch
          type=ref,event=tag

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  create-version-tag:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version
      id: get_version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Current version: ${VERSION}"

    - name: Check if tag already exists
      id: check_tag
      run: |
        TAG="v${{ steps.get_version.outputs.version }}"
        if git rev-parse "$TAG" >/dev/null 2>&1; then
          echo "Tag $TAG already exists, skipping tag creation"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "Tag $TAG does not exist, will create it"
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create and push tag
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        TAG="v${{ steps.get_version.outputs.version }}"
        echo "Creating tag: $TAG"
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag -a "$TAG" -m "Release $TAG"
        git push origin "$TAG"
        echo "Successfully created and pushed tag: $TAG"

    - name: Tag already exists - skip creation
      if: steps.check_tag.outputs.tag_exists == 'true'
      run: |
        echo "Tag v${{ steps.get_version.outputs.version }} already exists, skipping tag creation"
        echo "This is expected behavior when the same version is pushed multiple times"